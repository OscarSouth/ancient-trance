-- DERIVE KEY SIGNATURE FROM (7 NOTES, MINIMUM DISSONANCE)

-- ch n = (s "thru" #midichan (n-1))

once $ bpm 118

p10 d = d10 $ id
  -- $ fast 4
  -- $ rarely (jux (0.25 ~>))
  $ stack [ silence
  , midinote "0" |+ vel "0.2"
  , midinote "[~ 1]/2" |+ vel "0.2"
  -- , midinote "[~ 2]" |+ vel "0.3"
  , midinote "[2 2 3 2]" |+ vel (fast 1 $ lfo tri 0.2 0.8) |* vel 0.3
  ] # ch 10
    |+ note 36
    -- |+ note 60
    |* vel d


p2 <- gammaGen 1 0.4 >>= \rns ->
  chainCadence flat
  (initCadenceState (head rns) "D" [0,3,7]) -- init state
  (harmonicContext
    "D A D G A D" -- overtone series'
    "*" -- tonality
    "*" -- roots
  )
  4 -- len
  0.3 -- entropy

p1

c = p1

v = p2

  -- TEST
p01 s r d = d01 $ do
  id $
    progression' s r (
      stack [
      "[1@3 <2 0>]/8"
      ]) |* vel d #ch 1
      -- |+ oct 1

    -- M32
  p12 s r d = d12 $ do
    id $
      progression s r (
        stack [
        "[0 0 0 -2]/2"
        ]) |* vel d #ch 12
        |- oct 2

hush

closeVoicing p1

harmony p1

rotateProgression (-1)
 (
  chainProgression $
    toProgression <$> [
    initCadenceState 0 "Bb" [0,4,7],
    initCadenceState 1 "B" [0,4,7],
    initCadenceState 1 "C" [0,4,7],
    initCadenceState 1 "Db" [0,4,7]
    ]
)

:r

closeVoicing p1

progression' :: Progression -> Pattern Time -> Pattern Int -> Pattern ValueMap
progression' prog len pat =
  slow (4*len) (cat $ note <$>
  (`toScale` (fast (4*len) pat)) <$>
    fmap fromInteger <$> closeVoicing prog
  )
